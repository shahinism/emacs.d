* Variables
** TODO Remove this section:
   Following variables are not required anymore, since all the configuration
   will be placed in current file only.

   #+BEGIN_SRC emacs-lisp
     (defvar mymacs-core-dir (expand-file-name "core" user-emacs-directory)
       "The core directory of mymacs tools")

     (defvar mymacs-modules-dir (expand-file-name "modules" user-emacs-directory)
       "Mymacs's modules directory")

     (defvar mymacs-frame-font (list "Hack-10" (list "tahoma" '(#x600 . #x6ff)))
       "Default font to be used on mymacs frame")

     ;; add mymacs to load path
     (add-to-list 'load-path mymacs-core-dir)
     (add-to-list 'load-path mymacs-modules-dir)
   #+END_SRC

* Package Manager
** Package Repositories:
   Add following package repositories and initialize package manager:
   - [[http://melpa.org/][Melpa]]
   - [[http://elpa.gnu.org][Gnu]]
   - [[http://orgmode.org/elpa.html][Org]] (to get orgmode + all contribution packages)

    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
      (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")) 
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      (package-initialize)
    #+END_SRC
** [[https://github.com/jwiegley/use-package][use-package]]
   Ensure =use-package= is installed:
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
   Ask =use-package= to ensure all required packages will be installed
   automatically at startup time. This helps us to eliminate =:ensure t=
   argument while inserting a new package:
   #+BEGIN_SRC emacs-lisp
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+END_SRC
* Evil
** [[https://github.com/cofi/evil-leader][evil-leader]] 
   Insert =evil-leader= package and define =<SPC>= button as leader key.
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :config
       (global-evil-leader-mode)
       (evil-leader/set-leader "<SPC>"))
   #+END_SRC
** [[https://github.com/emacs-evil/evil][evil]]
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config
       (evil-mode +1)
       (evil-leader/set-key
         "gs" 'magit-status
         "wh" 'evil-window-left
         "wj" 'evil-window-down
         "wl" 'evil-window-right
         "wk" 'evil-window-up))
   #+END_SRC
*** Keybindings
    | normal | evil | function          | status                                         |
    |--------+------+-------------------+------------------------------------------------|
    |        | gs   | magit-status      | TODO: Move this to magit configuration section |
    |        | wh   | evil-window-left  |                                                |
    |        | wj   | evil-window-down  |                                                |
    |        | wl   | evil-window-right |                                                |
    |        | wk   | evil-window-up    |                                                |
* Org
** [[https://github.com/sabof/org-bullets][org-bullets]]
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC
** [[https://github.com/edwtjo/evil-org-mode][evil-org]] 
   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :config
       (add-hook 'org-mode-hook (lambda () (evil-org-mode +1))))
   #+END_SRC

* Goodies
  Here I'm going to define functions or packages that are useful/helpful in
  configuration:
** [[https://github.com/nschum/fringe-helper.el][fringe-helper]] 
   This package will help to define custom fringe shapes for packages. Currently
   used in following packages:
   - Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package fringe-helper)
  #+END_SRC
** Compiler
   This function will byte-compile all the packages developed for configuration.
*** TODO Remove this if it is not required anymore.
    #+BEGIN_SRC emacs-lisp
      (defun mymacs-compile ()
        (interactive)
        (let ((targets (append (list (expand-file-name "init.el" user-emacs-directory))
                               (directory-files mymacs-core-dir t "^[^\.].+\.el$")
                               (directory-files mymacs-modules-dir t "^[^\.].+\.el$"))))
          (mapc (lambda (file)
                  (let ((result (byte-compile-file file))
                        (short-name (file-relative-name file user-emacs-directory)))
                    (cond ((eq result 'no-byte-compile)
                           (message "Ignored %s" short-name))
                          ((null result)
                           (message "Failed to compile %s" short-name))
                          (t
                           (message "Compiled %s" short-name))))) targets)))
    #+END_SRC
** Open With
   This function will open current buffer in configured external program
   (system-wide preferred programs). I've used [[http://emacsredux.com/blog/2013/03/27/open-file-in-external-program/][this tip]] here.
   #+BEGIN_SRC emacs-lisp
     (defun mymacs-open-with (arg)
       (interactive "P")
       (when buffer-file-name
         (shell-command (concat
                         (cond
                          ((and (not arg) (eq system-type 'darwin)) "open")
                          ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                          (t (read-shell-command "Open current file with: ")))
                         " "
                         (shell-quote-argument buffer-file-name)))))

     (evil-leader/set-key "xo" 'mymacs-open-with)
   #+END_SRC
* Basic Configurations
** Defaults
*** Directories
    Move default backup and autosave directory to =/tmp/=
**** Backup
     #+BEGIN_SRC emacs-lisp
       (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     #+END_SRC
**** Auto Save
     #+BEGIN_SRC emacs-lisp
       (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))
     #+END_SRC
*** Save Place
    Remember my latest place when opening a new file.
    #+BEGIN_SRC emacs-lisp
      (save-place-mode 1)
    #+END_SRC
*** Undo Tree:
    Enable =global-undo-tree=:
    #+BEGIN_SRC emacs-lisp
      (global-undo-tree-mode) 
    #+END_SRC
** UI
*** UI Defaults
    Set maximum line length to 80 characters:
    #+BEGIN_SRC emacs-lisp
      (setq-default fill-column 80)
    #+END_SRC
    Enable current line highlighing:
    #+BEGIN_SRC emacs-lisp
       (global-hl-line-mode 1)
    #+END_SRC
    Enable =show-paren-mode= and set it to show matching parens immediately:
    #+BEGIN_SRC emacs-lisp
       (setq show-paren-delay 0)
       (show-paren-mode 1)
    #+END_SRC
    Enable =y-or-no-p= mode to save some typings:
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
    Enable visible-bell to save my ears:
    #+BEGIN_SRC emacs-lisp
     (setq-default visible-bell t)
    #+END_SRC
    Remove initial message from scratch buffer:
    #+BEGIN_SRC emacs-lisp
     (setq-default initial-scratch-message "")
    #+END_SRC
    Remove startup message:
    #+BEGIN_SRC emacs-lisp
     (setq-default inhibit-startup-message t)
    #+END_SRC
    Preventing indentation from using tabs: ([[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Here]])
    #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
    #+END_SRC
    Set default tab size to 4 spaces:
    #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
   #+END_SRC
*** Smooth Scrolling
    Move one line at a time using mouse cursor:
     #+BEGIN_SRC emacs-lisp
       (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     #+END_SRC
    Do not accelerate scrolling on mouse cursor:
     #+BEGIN_SRC emacs-lisp
       (setq mouse-wheel-progressive-speed nil)
     #+END_SRC
    Scroll window under the mouse cursor:
     #+BEGIN_SRC emacs-lisp
      (setq mouse-wheel-follow-mouse 't) 
     #+END_SRC
    Scroll one line at a time using keyboard:
     #+BEGIN_SRC emacs-lisp
      (setq scroll-step 1)
     #+END_SRC
**** Nice Scrolling:
     Prevent jumping when scrolling through margins:
     #+BEGIN_SRC emacs-lisp
      (setq scroll-margin 0)
     #+END_SRC
     Prevent recentering the pointer:
     #+BEGIN_SRC emacs-lisp
      (setq scroll-conservatively 100000) 
     #+END_SRC
     Preseve pointer position on scrolls:
     #+BEGIN_SRC emacs-lisp
      (setq scroll-preserve-screen-position 1) 
     #+END_SRC
*** [[https://emacs-doctor.com/emacs-strip-tease.html][Strip Emacs UI]] 
    Remove Scrollbar:
     #+BEGIN_SRC emacs-lisp
       (scroll-bar-mode 0)
     #+END_SRC
    Remove Toolbar:
     #+BEGIN_SRC emacs-lisp
       (tool-bar-mode 0)
     #+END_SRC
    Remove MenuBar:
     #+BEGIN_SRC emacs-lisp
       (menu-bar-mode 0)
     #+END_SRC
*** Mode Line:
    Show line number in the mode-line:
    #+BEGIN_SRC emacs-lisp
      (line-number-mode t)
    #+END_SRC
    Show column number in the mode-line:
     #+BEGIN_SRC emacs-lisp
       (column-number-mode t)
     #+END_SRC
    Show file size in the mode-line:
     #+BEGIN_SRC emacs-lisp
       (size-indication-mode t)
     #+END_SRC
*** [[http://pragmaticemacs.com/emacs/volatile-highlights/][Volatile Highlights]]
    Flash current changes on a block of text:
    #+BEGIN_SRC emacs-lisp
      (use-package volatile-highlights
        :config
        (volatile-highlights-mode t))
    #+END_SRC
*** [[https://github.com/TheBB/spaceline][Space Line]]
    Set a reach mode line like the one [[http://spacemacs.org][Spacemacs]] has:
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
        :config
        (require 'spaceline-config)
        (spaceline-emacs-theme))
    #+END_SRC
*** Theme
    Use [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] theme:
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
        :config
        (load-theme 'zenburn t))
    #+END_SRC
*** Font
    Define a function to font if it is possible (We are in a windowing system
    and the font is reachable):
    #+BEGIN_SRC emacs-lisp
      (defun mymacs/check-font-exists (font)
        "Check if FONT is installed on the system."
        (if (find-font (font-spec :name font))
            t
          nil))

      (defun mymacs/set-font (font &optional range)
        "Set FONT if it is installed or message otherwise."
        (when window-system
          (if (mymacs/check-font-exists font)
              (if range
                  (set-fontset-font "fontset-default" range font)
                (set-frame-font font)) 
            (message "Font %s doesn't exists" font))))
    #+END_SRC
    Now iterate over user defined fonts and set them:
    #+BEGIN_SRC emacs-lisp
      (defun mymacs-set-user-fonts ()
        "Set user defined fonts from mymacs-frame-font."
        (interactive)

        (dolist (font mymacs-frame-font)
          (if (stringp font)
              (mymacs/set-font font))
          (if (listp font)
              (mymacs/set-font (nth 0 font) (nth 1 font)))))

      (mymacs-set-user-fonts)
    #+END_SRC
*** [[https://github.com/iqbalansari/emacs-emojify][Emojify]]
    #+BEGIN_SRC emacs-lisp
      (use-package emojify
        :config
        (add-hook 'after-init-hook #'global-emojify-mode))
    #+END_SRC
* Keybindings
  Global keybindings will be defined here (if they are not related to an
  specific external mode):
** Helper functions
   Define an interactive function to kill current active buffer:
   #+BEGIN_SRC emacs-lisp
     (defun kill-current-buffer ()
       "Kill current buffer"
       (interactive)
       (kill-buffer (current-buffer)))
   #+END_SRC
** Bindings
   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-key
       "fs" 'save-buffer
       "w/" 'split-window-right
       "w-" 'split-window-below
       "wd" 'delete-window
       "bd" 'kill-current-buffer
       "ar" 'align-regexp)

     ;; Font size
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)
   #+END_SRC
** Help
   | normal | evil | function            | status |
   |--------+------+---------------------+--------|
   |        | fs   | save-buffer         |        |
   |        | w/   | split-window-right  |        |
   |        | w-   | split-window-below  |        |
   |        | wd   | delete-window       |        |
   |        | bd   | kill-current-buffer |        |
   |        | ar   | align-regexp        |        |
   | C-+    |      | text-scale-increase |        |
   | C--    |      | text-scale-decrease |        |
   
* OLD

#+BEGIN_SRC emacs-lisp
;; load mymacs
(require 'mymacs-completions)
(require 'mymacs-navigation)

;; load modules
(require 'mymacs-vc)
(require 'mymacs-programming)
(require 'mymacs-python)
(require 'mymacs-javascript)
(require 'mymacs-web)
(require 'mymacs-rust)
(require 'mymacs-c)
(require 'mymacs-docker)
(require 'mymacs-templates)
(require 'mymacs-latex)
(require 'mymacs-pdf)
#+END_SRC
