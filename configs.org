* Core
** Variables
*** TODO Remove this section:
    Following variables are not required anymore, since all the configuration
    will be placed in current file only.

    #+BEGIN_SRC emacs-lisp
      (defvar mymacs-core-dir (expand-file-name "core" user-emacs-directory)
        "The core directory of mymacs tools")

      (defvar mymacs-modules-dir (expand-file-name "modules" user-emacs-directory)
        "Mymacs's modules directory")

      (defvar mymacs-frame-font (list "Hack-10" (list "tahoma" '(#x600 . #x6ff)))
        "Default font to be used on mymacs frame")

      ;; add mymacs to load path
      (add-to-list 'load-path mymacs-core-dir)
      (add-to-list 'load-path mymacs-modules-dir)
    #+END_SRC

** Package Manager
*** Package Repositories:
    Add following package repositories and initialize package manager:
    - [[http://melpa.org/][Melpa]]
    - [[http://elpa.gnu.org][Gnu]]
    - [[http://orgmode.org/elpa.html][Org]] (to get orgmode + all contribution packages)

    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
      (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")) 
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      ;; (package-refresh-contents)
      (package-initialize)
    #+END_SRC
*** [[https://github.com/jwiegley/use-package][use-package]]
    Ensure =use-package= is installed:
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
    #+END_SRC
    Ask =use-package= to ensure all required packages will be installed
    automatically at startup time. This helps us to eliminate =:ensure t=
    argument while inserting a new package:
    #+BEGIN_SRC emacs-lisp
      (require 'use-package)
      (setq use-package-always-ensure t)
    #+END_SRC
*** [[https://github.com/dimitri/el-get][el-get]]
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

      (unless (require 'el-get nil 'noerror)
        (package-install 'el-get)
        (require 'el-get))

      (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
;;      (el-get 'sync)   
    #+END_SRC
** Evil
*** [[https://github.com/cofi/evil-leader][evil-leader]] 
    Insert =evil-leader= package and define =<SPC>= button as leader key.
    #+BEGIN_SRC emacs-lisp
      (use-package evil-leader
        :config
        (global-evil-leader-mode)
        (evil-leader/set-leader "<SPC>"))
    #+END_SRC
*** [[https://github.com/emacs-evil/evil][evil]]
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :config
        (evil-mode +1)
        (evil-leader/set-key
          "wh" 'evil-window-left
          "wj" 'evil-window-down
          "wl" 'evil-window-right
          "wk" 'evil-window-up))
    #+END_SRC
**** Keybindings
     | normal | evil | function          | status                                         |
     |--------+------+-------------------+------------------------------------------------|
     |        | wh   | evil-window-left  |                                                |
     |        | wj   | evil-window-down  |                                                |
     |        | wl   | evil-window-right |                                                |
     |        | wk   | evil-window-up    |                                                |
*** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
       	:config
       	(which-key-mode +1))
    #+END_SRC
** Completions
*** Defaults
   Smart tab behaviour
   #+BEGIN_SRC emacs-lisp
     (setq tab-always-indent 'complete)
   #+END_SRC
*** [[http://company-mode.github.io/][Company]]
    Install company and configure it to reflect without any delays:
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :config
        (setq
         company-minimum-prefix-length 0
         company-idle-delay 0
         company-dabbrev-downcase nil
         company-dabbrev-ignore-case nil
         company-dabbrev-code-other-buffers t
         company-tooltip-flip-when-above t
         company-frontends '(company-pseudo-tooltip-frontend company-echo-metadata-frontend)
         company-backends '(company-capf)
         company-global-modes '(not eshell-mode comint-mode erc-mode message-mode help-mode))

        (global-company-mode +1))
    #+END_SRC
*** [[https://github.com/Fuco1/smartparens][SmartParens]]
    Install smart parens and enable it globally:
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :config
        (smartparens-global-mode 1)
        (require 'smartparens-config))
    #+END_SRC
*** [[https://github.com/emacs-helm/helm/][Helm]]
    Install and enable helm globally:
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :demand t
        :init
        (setq helm-candidate-number-limit 50
              helm-display-header-line nil
              helm-ff-auto-update-initial-value nil
              helm-find-files-doc-header nil
              helm-split-window-in-side-p t
              helm-buffers-fuzzy-matching t
              helm-move-to-line-cycle-in-source t)

        :config
        (require 'helm-config)
        (helm-mode 1)

        (global-set-key (kbd "M-x") 'helm-M-x)
        (global-set-key (kbd "M-y") 'helm-show-kill-ring)
        (global-set-key (kbd "C-x b") 'helm-mini)
        (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
        (global-set-key (kbd "C-x C-f") 'helm-find-files)
        (global-set-key (kbd "C-h f") 'helm-apropos)
        (global-set-key (kbd "C-h r") 'helm-info-emacs)

        (which-key-declare-prefixes "SPC h" "Helm")
        (evil-leader/set-key
          "ff" 'helm-find-files
          "fr" 'helm-recentf
          ;; Needs ag (silver-searcher) to be installed
          "hp" 'helm-do-grep-ag
          "hf" 'helm-occur
          "hw" 'helm-wikipedia-suggest))
    #+END_SRC
**** Keybindings
     | normal  | evil | functions              | status |
     |---------+------+------------------------+--------|
     | M-x     |      | helm-M-x               |        |
     | M-y     |      | helm-show-kill-ring    |        |
     | C-x b   |      | helm-mini              |        |
     | C-x C-b |      | helm-buffers-list      |        |
     | C-x C-f | ff   | helm-find-files        |        |
     | C-h f   |      | helm-apropos           |        |
     | C-h r   |      | helm-info-emacs        |        |
     |         | fr   | helm-recentf           |        |
     |         | hp   | helm-do-grep-ag        |        |
     |         | hf   | helm-occur             |        |
     |         | hw   | helm-wikipedia-suggest |        |
**** Requirements
     - [[https://github.com/ggreer/the_silver_searcher][ag (the-silver-searcher)]]
*** [[https://github.com/areina/helm-dash][helm-dash]]
    Access [[https://kapeli.com/dash][dash]] (Cross OS) documents through helm:
    #+BEGIN_SRC emacs-lisp
      (use-package helm-dash
        :config
        (evil-leader/set-key "hd" 'helm-dash-at-point))
    #+END_SRC
**** Keybindings
     | normal | evil | functions          | status |
     |--------+------+--------------------+--------|
     |        | hd   | helm-dash-at-point |        | 
*** [[https://github.com/expez/company-quickhelp][company-quickhelp]]
    #+BEGIN_SRC emacs-lisp
      (use-package company-quickhelp
        :config
        (setq company-quickhelp-delay 0)
        (company-quickhelp-mode 1))
    #+END_SRC
*** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
    Install and enable =yasnippet= in global mode:
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :config
        (yas-global-mode 1)
        ;; Disabled it due to problems on company's normal work
        ;; (add-to-list 'company-backends '(company-yasnippet)))
        )
    #+END_SRC
    Install =helm-c-yasnippet= to easily search in snippets. Using leader key
    for this propuse wasn't effective enough in evil mode, so I'll set a global
    keybinding for it:
    #+BEGIN_SRC emacs-lisp
      (use-package helm-c-yasnippet
        :config
        (global-set-key (kbd "C-c y") 'helm-yas-complete))
    #+END_SRC
** Org
*** [[http://orgmode.org][org-mode]]
    #+BEGIN_SRC emacs-lisp
      (which-key-declare-prefixes "SPC o" "Org Mode")

      (evil-leader/set-key
        "oa" 'org-agenda
        "ol" 'org-store-link
        "ob" 'org-iswitchb)

      (org-babel-do-load-languages 'org-babel-load-languages
          '((sh . t)
            (dot . t)
            (python . t)
            (gnuplot . t)
            (org . t)
            (ditaa . t)
            (latex . t)))

      (setq org-confirm-babel-evaluate nil)

      ;; Some useful configs from http://ergoemacs.org/emacs/emacs_org_mode_customization.html
      (progn
        ;; org-mode setup
        ;; when opening a org file, don't collapse headings
        ;; (setq org-startup-folded nil)
        ;; wrap long lines. don't let it disappear to the right
        (setq org-startup-truncated nil)
        ;; when in a url link, enter key should open it
        (setq org-return-follows-link t)
        ;; make org-mode‚Äù syntax color embedded source code
        (setq org-src-fontify-natively t))
    #+END_SRC
    Supported languages for =babel= are available from [[http://orgmode.org/worg/org-contrib/babel/languages.html][here]].
**** Keybindings
     | normal | evil | function       | status |
     |--------+------+----------------+--------|
     |        | oa   | org-agenda     |        |
     |        | ol   | org-store-link |        |
     |        | ob   | org-iswitchb   |        |
*** [[https://github.com/sabof/org-bullets][org-bullets]]
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :config
        (add-hook 'org-mode-hook #'org-bullets-mode))
    #+END_SRC
*** [[https://github.com/edwtjo/evil-org-mode][evil-org]] 
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :config
        (add-hook 'org-mode-hook (lambda () (evil-org-mode +1))))
    #+END_SRC
*** [[https://github.com/marsmining/ox-twbs][ox-twbs]]
    Exporting to html with bootstrap style:
    #+BEGIN_SRC emacs-lisp
      (use-package ox-twbs)
    #+END_SRC
*** Htmlize
    To enable syntax highlighting:
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize
        :defer t)    
    #+END_SRC
*** [[https://github.com/caiorss/org-wiki][org-wiki]]
    #+BEGIN_SRC emacs-lisp
      (el-get-bundle org-wiki
        :url "https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el"
        :description "Emacs' desktop wiki built with org-mode"
        :features org-wiki)

      (setq org-wiki-location "~/Work/Wiki")
      (setq org-wiki-server-host "127.0.0.1") ;; Listen only localhost 
      (setq org-wiki-server-port "8181")
      (require 'org-wiki)
      (which-key-declare-prefixes "SPC ow" "Org Wiki")
      (evil-leader/set-key
        "owh" 'org-wiki-help
        "owi" 'org-wiki-index
        "owo" 'org-wiki-helm
        "owb" 'org-wiki-switch
        "owx" 'org-wiki-close
        "owl" 'org-wiki-link
        "ows" 'org-wiki-server-toggle
        "owe" 'org-wiki-export-html-sync)
    #+END_SRC
**** Keybindings
     | normal | evil | function                  | status |
     |--------+------+---------------------------+--------|
     |        | owh  | org-wiki-help             |        |
     |        | owi  | org-wiki-index            |        |
     |        | owo  | org-wiki-helm             |        |
     |        | owb  | org-wiki-switch           |        |
     |        | owx  | org-wiki-close            |        |
     |        | owl  | org-wiki-link             |        |
     |        | ows  | org-wiki-server-toggle    |        |
     |        | owe  | org-wiki-export-html-sync |        |
** Goodies
   Here I'm going to define functions or packages that are useful/helpful in
   configuration:
*** [[https://github.com/nschum/fringe-helper.el][fringe-helper]] 
    This package will help to define custom fringe shapes for packages. Currently
    used in following packages:
    - Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package fringe-helper)
   #+END_SRC
*** Compiler
    This function will byte-compile all the packages developed for configuration.
**** TODO Remove this if it is not required anymore.
     #+BEGIN_SRC emacs-lisp
       (defun mymacs-compile ()
         (interactive)
         (let ((targets (append (list (expand-file-name "init.el" user-emacs-directory))
                                (directory-files mymacs-core-dir t "^[^\.].+\.el$")
                                (directory-files mymacs-modules-dir t "^[^\.].+\.el$"))))
           (mapc (lambda (file)
                   (let ((result (byte-compile-file file))
                         (short-name (file-relative-name file user-emacs-directory)))
                     (cond ((eq result 'no-byte-compile)
                            (message "Ignored %s" short-name))
                           ((null result)
                            (message "Failed to compile %s" short-name))
                           (t
                            (message "Compiled %s" short-name))))) targets)))
     #+END_SRC
*** Open With
    This function will open current buffer in configured external program
    (system-wide preferred programs). I've used [[http://emacsredux.com/blog/2013/03/27/open-file-in-external-program/][this tip]] here.
    #+BEGIN_SRC emacs-lisp
      (defun mymacs-open-with (arg)
        (interactive "P")
        (when buffer-file-name
          (shell-command (concat
                          (cond
                           ((and (not arg) (eq system-type 'darwin)) "open")
                           ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                           (t (read-shell-command "Open current file with: ")))
                          " "
                          (shell-quote-argument buffer-file-name)))))

      (evil-leader/set-key "xo" 'mymacs-open-with)
    #+END_SRC
*** Undo Tree
    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :diminish undo-tree-mode
        :config
        (progn
          (global-undo-tree-mode)
          (setq undo-tree-visualizer-timestamps t)
          (setq undo-tree-visualizer-diff t))) 
    #+END_SRC
**** Keybindings
     | normal | evil | function            | status |
     |--------+------+---------------------+--------|
     | C-x u  |      | undo-tree-visualize |        |
*** Subword
    Make cursor movement stop in between camelCase words:
    #+BEGIN_SRC emacs-lisp
      (global-subword-mode 1)
    #+END_SRC
** Basic Configurations
*** Defaults
**** Directories
     Move default backup and autosave directory to =/tmp/=
***** Backup
      #+BEGIN_SRC emacs-lisp
        (setq backup-directory-alist
            `((".*" . ,temporary-file-directory)))
      #+END_SRC
***** Auto Save
      #+BEGIN_SRC emacs-lisp
        (setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t)))
      #+END_SRC
**** Save Place
     Remember my latest place when opening a new file.
     #+BEGIN_SRC emacs-lisp
       (save-place-mode 1)
     #+END_SRC
**** Undo Tree:
     Enable =global-undo-tree=:
     #+BEGIN_SRC emacs-lisp
       (global-undo-tree-mode) 
     #+END_SRC
*** UI
**** UI Defaults
     Set maximum line length to 80 characters:
     #+BEGIN_SRC emacs-lisp
       (setq-default fill-column 80)
     #+END_SRC
     Enable current line highlighing:
     #+BEGIN_SRC emacs-lisp
        (global-hl-line-mode 1)
     #+END_SRC
     Enable =show-paren-mode= and set it to show matching parens immediately:
     #+BEGIN_SRC emacs-lisp
        (setq show-paren-delay 0)
        (show-paren-mode 1)
     #+END_SRC
     Enable =y-or-no-p= mode to save some typings:
     #+BEGIN_SRC emacs-lisp
       (fset 'yes-or-no-p 'y-or-n-p)
     #+END_SRC
     Enable visible-bell to save my ears:
     #+BEGIN_SRC emacs-lisp
      (setq-default visible-bell t)
     #+END_SRC
     Remove initial message from scratch buffer:
     #+BEGIN_SRC emacs-lisp
      (setq-default initial-scratch-message "")
     #+END_SRC
     Remove startup message:
     #+BEGIN_SRC emacs-lisp
      (setq-default inhibit-startup-message t)
     #+END_SRC
     Preventing indentation from using tabs: ([[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Here]])
     #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
     #+END_SRC
     Set default tab size to 4 spaces:
     #+BEGIN_SRC emacs-lisp
      (setq-default tab-width 4)
    #+END_SRC
**** Smooth Scrolling
     Move one line at a time using mouse cursor:
      #+BEGIN_SRC emacs-lisp
        (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
      #+END_SRC
     Do not accelerate scrolling on mouse cursor:
      #+BEGIN_SRC emacs-lisp
        (setq mouse-wheel-progressive-speed nil)
      #+END_SRC
     Scroll window under the mouse cursor:
      #+BEGIN_SRC emacs-lisp
       (setq mouse-wheel-follow-mouse 't) 
      #+END_SRC
     Scroll one line at a time using keyboard:
      #+BEGIN_SRC emacs-lisp
       (setq scroll-step 1)
      #+END_SRC
***** Nice Scrolling:
      Prevent jumping when scrolling through margins:
      #+BEGIN_SRC emacs-lisp
       (setq scroll-margin 0)
      #+END_SRC
      Prevent recentering the pointer:
      #+BEGIN_SRC emacs-lisp
       (setq scroll-conservatively 100000) 
      #+END_SRC
      Preseve pointer position on scrolls:
      #+BEGIN_SRC emacs-lisp
       (setq scroll-preserve-screen-position 1) 
      #+END_SRC
**** [[https://emacs-doctor.com/emacs-strip-tease.html][Strip Emacs UI]] 
     Remove Scrollbar:
      #+BEGIN_SRC emacs-lisp
        (scroll-bar-mode 0)
      #+END_SRC
     Remove Toolbar:
      #+BEGIN_SRC emacs-lisp
        (tool-bar-mode 0)
      #+END_SRC
     Remove MenuBar:
      #+BEGIN_SRC emacs-lisp
        (menu-bar-mode 0)
      #+END_SRC
**** Mode Line:
     Show line number in the mode-line:
     #+BEGIN_SRC emacs-lisp
       (line-number-mode t)
     #+END_SRC
     Show column number in the mode-line:
      #+BEGIN_SRC emacs-lisp
        (column-number-mode t)
      #+END_SRC
     Show file size in the mode-line:
      #+BEGIN_SRC emacs-lisp
        (size-indication-mode t)
      #+END_SRC
     [[https://github.com/dbordak/telephone-line][Telephone line]]:
     #+BEGIN_SRC emacs-lisp
       (use-package telephone-line
         :config
         (telephone-line-defsegment* mymacs-telephone-line-buffer-info ()
           (when (and (eq 'python-mode major-mode)
                      (bound-and-true-p pyvenv-virtual-env-name))
             (telephone-line-raw (format "pyvenv: %s" pyvenv-virtual-env-name) t)))

         (setq telephone-line-lhs
               '((evil   . (telephone-line-evil-tag-segment))
                 (accent . (telephone-line-major-mode-segment))
                 (evil   . (telephone-line-buffer-segment))
                 (nil    . (telephone-line-minor-mode-segment))))
         
         (setq telephone-line-rhs
               '((nil    . (telephone-line-misc-info-segment))
                 (evil   . (mymacs-telephone-line-buffer-info))
                 (accent . (telephone-line-vc-segment
                            telephone-line-erc-modified-channels-segment
                            telephone-line-process-segment))
                 (evil   . (telephone-line-airline-position-segment))))

         (require 'telephone-line)
         (require 'telephone-line-config)
         (telephone-line-mode t))
     #+END_SRC
     [[https://github.com/ryuslash/mode-icons][mode-icons]]:
     #+BEGIN_SRC emacs-lisp
       (use-package mode-icons
         :config
         (mode-icons-mode))
     #+END_SRC
**** [[http://pragmaticemacs.com/emacs/volatile-highlights/][Volatile Highlights]]
     Flash current changes on a block of text:
     #+BEGIN_SRC emacs-lisp
       (use-package volatile-highlights
         :config
         (volatile-highlights-mode t))
     #+END_SRC
# **** [[https://github.com/TheBB/spaceline][Space Line]]
#      Set a reach mode line like the one [[http://spacemacs.org][Spacemacs]] has:
#      #+BEGIN_SRC emacs-lisp
#        (use-package spaceline
#          :config
#          (require 'spaceline-config)
#          (spaceline-helm-mode))
#      #+END_SRC
**** Theme
     Use [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] theme:
     #+BEGIN_SRC emacs-lisp
       ;; (use-package zenburn-theme
       ;;   :config
       ;;   (load-theme 'zenburn t))
     #+END_SRC
     Use [[https://github.com/kuanyui/moe-theme.el][moe-theme]]:
     #+BEGIN_SRC emacs-lisp
       (use-package moe-theme
         :config
         (moe-dark))
     #+END_SRC
**** Font
     Define a function to font if it is possible (We are in a windowing system
     and the font is reachable):
     #+BEGIN_SRC emacs-lisp
       (defun mymacs/check-font-exists (font)
         "Check if FONT is installed on the system."
         (if (find-font (font-spec :name font))
             t
           nil))

       (defun mymacs/set-font (font &optional range)
         "Set FONT if it is installed or message otherwise."
         (when window-system
           (if (mymacs/check-font-exists font)
               (if range
                   (set-fontset-font "fontset-default" range font)
                 (set-frame-font font)) 
             (message "Font %s doesn't exists" font))))
     #+END_SRC
     Now iterate over user defined fonts and set them:
     #+BEGIN_SRC emacs-lisp
       (defun mymacs-set-user-fonts ()
         "Set user defined fonts from mymacs-frame-font."
         (interactive)

         (dolist (font mymacs-frame-font)
           (if (stringp font)
               (mymacs/set-font font))
           (if (listp font)
               (mymacs/set-font (nth 0 font) (nth 1 font)))))

       (mymacs-set-user-fonts)
     #+END_SRC
**** [[https://github.com/iqbalansari/emacs-emojify][Emojify]]
     #+BEGIN_SRC emacs-lisp
       (use-package emojify
         :config
         (add-hook 'after-init-hook #'global-emojify-mode))
     #+END_SRC
** Keybindings
   Global keybindings will be defined here (if they are not related to an
   specific external mode):
*** Helper functions
    Define an interactive function to kill current active buffer:
    #+BEGIN_SRC emacs-lisp
      (defun kill-current-buffer ()
        "Kill current buffer"
        (interactive)
        (kill-buffer (current-buffer)))
    #+END_SRC
*** Bindings
    #+BEGIN_SRC emacs-lisp
      (which-key-declare-prefixes "SPC w" "Windows")
      (which-key-declare-prefixes "SPC b" "Buffers")
      (which-key-declare-prefixes "SPC t" "Text")
      (which-key-declare-prefixes "SPC f" "Files")
      (evil-leader/set-key
        "fs" 'save-buffer
        "w/" 'split-window-right
        "w-" 'split-window-below
        "wd" 'delete-window
        "bd" 'kill-current-buffer
        "tr" 'align-regexp)

      ;; Font size
      (global-set-key (kbd "C-+") 'text-scale-increase)
      (global-set-key (kbd "C--") 'text-scale-decrease)
    #+END_SRC
*** Help
    | normal | evil | function            | status |
    |--------+------+---------------------+--------|
    |        | fs   | save-buffer         |        |
    |        | w/   | split-window-right  |        |
    |        | w-   | split-window-below  |        |
    |        | wd   | delete-window       |        |
    |        | bd   | kill-current-buffer |        |
    |        | ar   | align-regexp        |        |
    | C-+    |      | text-scale-increase |        |
    | C--    |      | text-scale-decrease |        |
** Navigation
*** [[http://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Avy]]
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :config
        (evil-leader/set-key
          "<SPC>" 'avy-goto-word-or-subword-1))
    #+END_SRC
**** Keybindings
     | normal | evil  | functions                  | status |
     |--------+-------+----------------------------+--------|
     |        | <SPC> | avy-goto-word-or-subword-1 |        |
*** [[https://www.emacswiki.org/emacs/NeoTree#toc12][Neotree]]
    Define a function to collapse item in point in =neotree=. ([[https://github.com/syl20bnr/spacemacs/blob/bd7ef98e4c35fd87538dd2a81356cc83f5fd02f3/layers/%252Bspacemacs/spacemacs-ui-visual/funcs.el#L52][source]])
    #+BEGIN_SRC emacs-lisp
      (defun mymacs/neotree-collapse ()
        "Collapse a neotree node."
        (interactive)
        (let ((node (neo-buffer--get-filename-current-line)))
          (when node
            (when (file-directory-p node)
              (neo-buffer--set-expand node nil)
              (neo-buffer--refresh t))
            (when neo-auto-indent-point
              (neo-point-auto-indent)))))

      (defun mymacs/neotree-collapse-or-up ()
        "Collapse an expanded directory node or go to the parent node."
        (interactive)
        (let ((node (neo-buffer--get-filename-current-line)))
          (when node
            (if (file-directory-p node)
                (if (neo-buffer--expanded-node-p node)
                    (mymacs/neotree-collapse)
                  (neotree-select-up-node))
              (neotree-select-up-node)))))
    #+END_SRC
    Install [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package to use icon fonts for files:
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons)
    #+END_SRC
    Install and config =neotree=:
    #+BEGIN_SRC emacs-lisp
      (use-package neotree
        :after all-the-icons
        :config
        (setq
         neo-theme (if (display-graphic-p) 'icons 'arrow)
         neo-autorefresh nil
         neo-mode-line-type 'none
         neo-window-width 25
         neo-banner-message nil
         neo-show-hidden-files nil
         neo-keymap-style 'concise
         neo-hidden-regexp-list
              '(;; vcs folders
                "^\\.\\(git\\|hg\\|svn\\)$"
                ;; compiled files
                "\\.\\(pyc\\|o\\|elc\\|lock\\|css.map\\)$"
                ;; generated files, caches or local pkgs
                "^\\(node_modules\\|vendor\\|.\\(project\\|cask\\|yardoc\\|sass-cache\\)\\)$"
                ;; org-mode folders
                "^\\.\\(sync\\|export\\|attach\\)$"
                "~$"
                "^#.*#$"))
        (evil-leader/set-key
          "ft" 'neotree-toggle)

        (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-stretch-toggle)
        (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
        (evil-define-key 'normal neotree-mode-map (kbd "l") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "h") 'mymacs/neotree-collapse-or-up))
    #+END_SRC
**** Requirements
     - *All the icons font:*
       You can install them using =M-x all-the-icons-install-fonts RET= command.
**** Keybindings
     | normal | evil | functions                     | status |
     |--------+------+-------------------------------+--------|
     |        | ft   | neotree-toggle                |        |
     | RET    |      | neotree-enter                 |        |
     | TAB    |      | neotree-stretch-toggle        |        |
     | q      |      | neotree-hide                  |        |
     | l      |      | neotree-enter                 |        |
     | h      |      | mymacs/neotree-collapse-or-up |        |
*** [[https://github.com/Malabarba/beacon][Beacon]]
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
        :config
        (beacon-mode +1))
    #+END_SRC
*** [[https://github.com/victorhge/iedit][IEdit]]
    Install and config =iedit=:
    #+BEGIN_SRC emacs-lisp
      (use-package iedit
        :config
        (which-key-declare-prefixes "SPC s" "Search")
        (evil-leader/set-key "se" 'iedit-mode))
    #+END_SRC
**** Keybinding
     | normal | evil | function   | status |
     |--------+------+------------+--------|
     |        | se   | iedit-mode |        |
*** [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]
    #+BEGIN_SRC emacs-lisp
      (use-package evil-matchit
        :config
        (global-evil-matchit-mode 1))
    #+END_SRC
**** Keybindings
     | normal | evil | function          | status |
     |--------+------+-------------------+--------|
     | %      |      | evilmi-jump-items |        |
* Modules
** Version Control
*** [[https://github.com/magit/magit/][Magit]]
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (which-key-declare-prefixes "SPC g" "Version Control")
        (evil-leader/set-key "gs" 'magit-status))
    #+END_SRC
    Install [[https://github.com/emacs-evil/evil-magit][ evil-magit]] to make Magit and Evil play nice together
    #+BEGIN_SRC emacs-lisp
      (use-package evil-magit)
    #+END_SRC
**** Keybindings
     | normal | evil | function     | status |
     |--------+------+--------------+--------|
     |        | gs   | magit-status |        |
*** =.gitignore= and =.gitconfig=
    #+BEGIN_SRC emacs-lisp
      (use-package gitignore-mode)
      (use-package gitconfig-mode)
    #+END_SRC
** Programming General
*** [[http://emacsredux.com/blog/2014/04/05/which-function-mode/][which-func]]
    #+BEGIN_SRC emacs-lisp
      (use-package which-func
        :config
        (setq which-func-unknown "n/a")
        (which-function-mode))
    #+END_SRC
*** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :config
        (when (memq window-system '(mac ns x))
          (exec-path-from-shell-initialize)))
    #+END_SRC
*** [[https://github.com/bbatsov/projectile][Projectile]]
    Add a helper function to help neo-tree to find project's root directory
    using projectile:
    #+BEGIN_SRC emacs-lisp
      (defun neotree-find-project-root ()
        (interactive)
        (if (neo-global--window-exists-p)
            (neotree-hide)
          (let ((origin-buffer-file-name (buffer-file-name)))
            (neotree-find (projectile-project-root))
            (neotree-find origin-buffer-file-name))))
    #+END_SRC
    Install and config projectile:
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :after helm
        :config
        (setq projectile-completion-system 'helm)

        (evil-leader/set-key
          "pt" 'neotree-find-project-root))
    #+END_SRC
    Install and config [[https://github.com/bbatsov/helm-projectile][helm-projecctile]]:
    #+BEGIN_SRC emacs-lisp
      (use-package helm-projectile
        :after
        helm
        projectile
        :config
        (evil-leader/set-key
          "fp" 'helm-projectile))
    #+END_SRC
**** Keybindings
     | normal | evil | function                  | status |
     |--------+------+---------------------------+--------|
     |        | pt   | neotree-find-project-root |        |
     |        | fp   | helm-projectile           |        | 
*** [[http://flycheck.org/][Flycheck]] 
    Install flycheck and config its fringe indicators using =fringe-helper=:
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :init
        (global-flycheck-mode)
        :config
        (setq flycheck-indication-mode 'right-fringe)
        (fringe-helper-define 'flycheck-fringe-bitmap-double-arrow 'center
                              "...X...."
                              "..XX...."
                              ".XXX...."
                              "XXXX...."
                              ".XXX...."
                              "..XX...."
                              "...X....")
        (add-hook 'prog-mode-hook 'flycheck-mode))
    #+END_SRC
*** [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]]
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-pos-tip
        :after flycheck
        :config
        (setq flycheck-pos-tip-timeout 10
              flycheck-display-errors-delay 0.5)
        (flycheck-pos-tip-mode +1))
    #+END_SRC
*** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :config
        (global-evil-leader-mode)
        (define-key evil-normal-state-map "gc" 'evilnc-comment-operator))
    #+END_SRC
*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :config
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC
** Clojure Script
   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode)
   #+END_SRC
** Graphviz Dot
   #+begin_src emacs-lisp
     (use-package graphviz-dot-mode)
   #+end_src
** Pig
   Major mode for Pig, data flow language for Hadoop:
   #+BEGIN_SRC emacs-lisp
     (use-package pig-mode)
   #+END_SRC
** CSV
   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode)
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)   
   #+END_SRC
** Python
*** Documentation
    Cofigure helm dash sources on Python mode:
    #+BEGIN_SRC emacs-lisp
      (defun python-doc ()
        "Dfine Python docs for helm-dash."
        (interactive)
        (setq-local helm-dash-docsets '("Python 3" "Python 2")))
    #+END_SRC
*** Python
    Configure original Python mode to not show warnings when indent guess fails:
    #+BEGIN_SRC emacs-lisp
      (use-package python
        :init
        (add-hook 'python-mode-hook 'python-doc)
        (setq python-indent-guess-indent-offset-verbose nil
              python-shell-interpreter "python"))
    #+END_SRC
*** [[https://github.com/proofit404/anaconda-mode][Anaconda mode]]
    #+BEGIN_SRC emacs-lisp
      (use-package anaconda-mode
        :after python
        :bind (("M-s" . anaconda-mode-find-definitions))
        :config
        ;; trim eldoc to fit the frame
        (setq anaconda-mode-eldoc-as-single-line t)
        (add-hook 'python-mode-hook #'anaconda-mode)
        (add-hook 'anaconda-mode-hook #'anaconda-eldoc-mode))

      (use-package company-anaconda
        :after
        anaconda-mode
        company
        :config
        (add-to-list 'company-backends 'company-anaconda))
    #+END_SRC
*** Additional modes
    Additional mode to help with Python ecosystem:
**** [[https://github.com/Wilfred/pip-requirements.el][pip-requirements]]
     #+BEGIN_SRC emacs-lisp
        (use-package pip-requirements
         :mode ("/requirements.txt$" . pip-requirements-mode))    
     #+END_SRC
**** pyenv-mode
     #+BEGIN_SRC emacs-lisp
       (use-package pyenv-mode
         :config
         (pyenv-mode 1))
     #+END_SRC
**** pyvenv-mode
     #+BEGIN_SRC emacs-lisp
       (use-package pyvenv
         :config
         (which-key-declare-prefixes-for-mode 'python-mode "SPC p" "Python")
         (evil-leader/set-key-for-mode 'python-mode
           "pw" 'pyvenv-workon
           "pd" 'pyvenv-deactivate))
     #+END_SRC
**** Helper Function
     #+BEGIN_SRC emacs-lisp
       (defun python-format-buffer ()
         "Format python buffer using yapify and isort."
         (interactive)
         (yapfify-buffer (point-min) (point-max))
         (py-isort-buffer))

       ; yapfify
       (use-package yapfify :defer t)

       ; py-isort
       (use-package py-isort :defer t)

       (evil-leader/set-key-for-mode 'python-mode
         "=" 'python-format-buffer)
     #+END_SRC
** JavaScript
*** Documentation
    Configure helm dash sources on javascript mode:
    #+BEGIN_SRC emacs-lisp
      (defun javascript-doc ()
        "Dfine Javascript docs for helm-dash."
        (interactive)
        (setq-local helm-dash-docsets '("JavaScript")))
    #+END_SRC
*** [[https://github.com/mooz/js2-mode/blob/master/js2-mode.el][js2-mode]]
    #+BEGIN_SRC emacs-lisp
      (defun mymacs/js2-mode-hook ()
        (javascript-doc)
        (setq flycheck-checker 'javascript-standard))

      (use-package js2-mode
        :mode "\\.js$"
        :interpreter "node"
        :config
        (setq js2-skip-preprocessor-directives t
              js2-highlight-external-variables nil
              js2-mode-show-parse-errors nil
              js2-mode-show-strict-warnings nil)

        (setq-default js2-basic-offset 2)

        (add-hook 'js2-mode-hook 'mymacs/js2-mode-hook))

      (use-package xref-js2)
    #+END_SRC
*** [[https://github.com/ternjs/tern][Tern]]
    #+BEGIN_SRC emacs-lisp
      (use-package tern
        :init (add-hook 'js2-mode-hook #'tern-mode)
        :config
        (setq tern-command (append tern-command '("--no-port-file"))))

      (use-package company-tern
        :after
        tern
        company
        :config
        (add-to-list 'company-backends 'company-tern))
    #+END_SRC
    My current =~/.tern-config= file contains following configuration:
    #+BEGIN_SRC json
      {
          "libs" : [
              "browser"
          ],
          "loadEagerly": [ "js/*.js", "*.js" ],
          "plugins" : {
              "commonjs" : {},
              "node" : {},
              "requirejs" : {},
              "node_resolve" : {},
          "es_modules": {}
          }
      }
    #+END_SRC
*** [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
    To support =jsx= files:
    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :mode "\\.jsx$"
        :mode "components/.+\\.js$"
        :init
        ;; auto-detect JSX file
        ;; source: https://github.com/hlissner/.emacs.d/blob/master/modules/lang/javascript/config.el
        (push (cons (lambda ()
                      (and buffer-file-name
                           (equal (file-name-extension buffer-file-name) "js")
                           (re-search-forward "\\(^\\s-*import React\\|\\( from \\|require(\\)[\"']react\\)"
                                              magic-mode-regexp-match-limit t)
                           (progn
                             (goto-char (match-beginning 1))
                             (not (sp-point-in-string-or-comment)))))
                    'rjsx-mode)
              magic-mode-alist))
    #+END_SRC
*** Coffee mode
    #+BEGIN_SRC emacs-lisp
      (use-package coffee-mode
        :mode "\\.coffee$"
        :init (setq coffee-indent-like-python-mode t))
    #+END_SRC
* OLD

#+BEGIN_SRC emacs-lisp
  ;; load modules
  (require 'mymacs-web)
  (require 'mymacs-rust)
  (require 'mymacs-c)
  (require 'mymacs-docker)
  (require 'mymacs-templates)
  (require 'mymacs-latex)
  ;; (require 'mymacs-pdf)
#+END_SRC
* Miscellaneous
  Sync =el-get= recipe cache ([[https://github.com/dimitri/el-get/issues/2232][related issue]]):
  #+BEGIN_SRC emacs-lisp
    (el-get 'sync) 
  #+END_SRC
