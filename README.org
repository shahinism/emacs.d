* Packages
  
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (straight-use-package 'use-package)
  #+end_src

* Defaults
  #+begin_src emacs-lisp
    (use-package uniquify
      :config
      (setq uniquify-buffer-name-style 'forward
            uniquify-separator "/"
            uniquify-after-kill-buffer-p t    ;; rename buffer after killing uniquify
            uniquify-ignore-buffers-re "^\\*" ;; don't mock special buffers
            ))


    ;; Enable show paren mode and set it to show matching parens immediately
    (show-paren-mode)
    (setq show-paren-delay 0
          show-paren-style 'expression)

    ;; Enable ~y-or-no-p~
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Enable visible-bell to save ears
    (setq-default visible-bell t)

    ;; Remove initial message from scratch buffer:
    (setq-default initial-scratch-message "")

    ;; Remove startup message:
    (setq-default inhibit-startup-message t)

    ;; http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html
    (setq-default indent-tabs-mode nil)

    ;; Strip UI
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)

    ;; Show line number in the mode-line:
    (line-number-mode t)

    ;; Show column number in the mode-line:
    (column-number-mode t)

    ;; Show file size in the mode-line:
    (size-indication-mode t)

    ;; Enable global font lock
    (global-font-lock-mode)

    ;; highlight current line
    (global-hl-line-mode)

    ;; whitespaces
    (setq whitespace-style '(tab-mark))
    (global-whitespace-mode)

    ;; backups
    (setq make-backup-files nil
          auto-save-default nil)

    ;; TODO add description
    (auto-save-visited-mode)
    (global-auto-revert-mode)

    ;; TODO add save on hooks from lolsmacs

    ;; emacs server
    (server-start)
  #+end_src
** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode +1)
    (setq beacon-color "#ff8059"))
#+end_src
* Helper Functions
  
** TODO Write helper to run a piece of code when a package is loaded.
   References:
   1. [[https://github.com/hlissner/doom-emacs/blob/2441d28ad15a9a2410f8d65641961ea5b1d39782/core/core-lib.el#L333][doom after!]]
   2. [[https://github.com/abo-abo/ace-window/wiki][ace wiki]]

  #+begin_src emacs-lisp
  #+end_src
  
* Navigation
** Scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :straight (smooth-scrolling :type git :host github :repo "aspiers/smooth-scrolling")
    :init
    (smooth-scrolling-mode 1))
#+end_src
** Modalka

   #+begin_src emacs-lisp
     (use-package crux
       :straight t)

     (defun run-exit-modalka (func &rest args)
       "run func and exit modalka mode afterwards."
       (apply func args)
       (if modalka-mode
           (disable-modalka)))

     (defun enable-modalka ()
       "Enable modalka if it's not already active"
       (interactive)
       (if (not modalka-mode)
           (modalka-mode 1))
       (message "modalka is enable now."))

     (defun disable-modalka ()
       "Disable modalka if it's active."
       (interactive)
       (if modalka-mode
           (modalka-mode -1))
       (message "modalka is disable now."))

     (defun insert-forward ()
       "Move one character forward and exit modalka"
       (interactive)
       (run-exit-modalka 'forward-char))

     (defun insert-end-of-line ()
       "Move to the end of line and exit modalka"
       (interactive)
       (run-exit-modalka 'end-of-line))

     (defun insert-new-line-above ()
       "Open a new line above and exit modalka"
       (interactive)
       (run-exit-modalka 'crux-smart-open-line-above))

     (defun insert-new-line ()
       "Open a new line and exit modalka"
       (interactive)
       (run-exit-modalka 'crux-smart-open-line nil))

     (defun kill-line-forward ()
       "Kill current line and the one after it"
       (interactive)
       (crux-kill-whole-line 2))

     (defun kill-line-backward ()
       "Kill current line and the one before it"
       (interactive)
       (previous-line 1)
       (crux-kill-whole-line 2))

     (defun replace-char-at-point ()
       "Replace char at point"
       (interactive)
       (let ((cursor-color (face-attribute 'cursor :background)))
         (blink-cursor-mode 0)
         (set-cursor-color "#005e00")
         (let ((char (read-key)))
           (delete-char 1)
           (insert char)
           (backward-char))
         (set-cursor-color cursor-color)
         (blink-cursor-mode 1)
         ))

     (defun find-literate-config ()
       "Find literate config file"
       (interactive)
       (find-file (expand-file-name "README.org" user-emacs-directory)))

     (defun kill-point-or-region ()
       "kill current character at point or marked region"
       (interactive)
       (if mark-active
           (kill-region (region-beginning) (region-end))
         (kill-region (point) (+ (point) 1))))

     (use-package easy-kill
       :straight t)

     (use-package ace-jump-mode
       :straight t)

     (use-package modalka
       :straight t
       :after general crux hydra general
       :config
       (setq-default cursor-type '(bar . 2))
       (setq modalka-cursor-type 'box)

       (defhydra kill-hydra (:color blue)
         ("d" crux-kill-whole-line "kill current line")
         ("w" kill-word "kill next word")
         ("$" kill-line "kill to the end of line")
         ("j" kill-line-forward "kill line forward")
         ("k" kill-line-backward "kill line backward"))

       (defhydra ace-jump-hydra (:color blue)
         ("w" ace-jump-word-mode "jump to word")
         ("c" ace-jump-char-mode "jump to character")
         ("l" ace-jump-line-mode "jump to line"))

       (modalka-global-mode 1)

       (general-define-key
        :keymaps 'modalka-mode-map
        :prefix "SPC"
        "" nil
        ":" 'hydra-anzu/body
        "J" 'hydra-journal/body
        "P" 'hydra-projectile-other-window/body
        "X" 'org-capture
        "bb" 'ivy-switch-buffer
        "br" 'crux-rename-file-and-buffer
        "e" 'hydra-expand/body
        "ff" 'counsel-find-file
        "fi" 'find-literate-config
        "fr" 'counsel-recentf
        "fs" 'save-buffer
        "gg" 'magit-status
        "j" 'dumb-jump-hydra/body
        "l" 'hydra-eglot/body
        "p" 'hydra-projectile/body
        "r" 'hydra-roam/body
        "w" 'hydra-window/body
        )

       (general-define-key
        :keymaps 'modalka-mode-map
        "M-;" 'comment-line
        "RET" ""
        "DEL" ""
        "!" ""
        "@" ""
        "#" ""
        "%" ""
        "^" ""
        "&" ""
        "(" ""
        ")" ""
        "-" ""
        "+" ""
        "\\" ""
        "|" ""
        "[" ""
        "]" ""
        "{" ""
        "'" ""
        ";" ""
        "\"" ""
        ":" ""
        "/" 'swiper-isearch
        "." ""
        "," ""
        ">" ""
        "<" ""
        "`'" ""
        "~" ""
        "0" 'beginning-of-line
        "*" 'swiper-thing-at-point
        "=" 'indent-region
        "$" 'end-of-line
        "A" 'insert-end-of-line
        "B" ""
        "C" ""
        "D" ""
        "E" ""
        "F" 'ace-jump-hydra/body  ;; probaby useless
        "G" 'end-of-buffer
        "H" ""
        "I" ""
        "J" ""
        "K" ""
        "L" ""
        "M" ""
        "N" ""
        "O" 'insert-new-line-above
        "P" ""
        "Q" ""
        "R" ""
        "S" ""
        "T" ""
        "U" ""
        "V" ""
        "W" ""
        "Y" ""
        "Z" ""
        "C-r" 'undo-redo
        "X" 'backward-delete-char-untabify
        "^" 'back-to-indentation
        "a" 'insert-forward
        "b" 'backward-word
        "c" ""
        "d" 'kill-hydra/body
        "e" ""
        "f" 'ace-jump-char-mode
        "g" nil
        "gg" 'beginning-of-buffer
        "h" 'backward-char
        "i" 'disable-modalka
        "j" 'next-line
        "k" 'previous-line
        "l" 'forward-char
        "m" ""
        "n" ""
        "o" 'insert-new-line
        "p" 'yank
        "q" ""
        "r" 'replace-char-at-point
        "s" ""
        "t" ""
        "u" 'undo
        "v" ""
        "w" 'forward-word
        "x" 'kill-point-or-region
        "z" ""
        "y" nil
        "yy" 'easy-kill
        )

       (modalka-define-kbd "1" "M-1")
       (modalka-define-kbd "2" "M-2")
       (modalka-define-kbd "3" "M-3")
       (modalka-define-kbd "4" "M-4")
       (modalka-define-kbd "5" "M-5")
       (modalka-define-kbd "6" "M-6")
       (modalka-define-kbd "7" "M-7")
       (modalka-define-kbd "8" "M-8")
       (modalka-define-kbd "9" "M-9")
       (general-define-key [escape] 'enable-modalka)
       )
   #+end_src
** General
   
   - *NOTE:* It's important to keep it up here, to have ~:general~
     keyword available in ~use-package~.
   - evil-collection binds over SPC in many packages. To use SPC as a
     leader key with the general library set
     ~general-override-states~ ([[https://github.com/emacs-evil/evil-collection#faq][source]]).

   #+begin_src emacs-lisp
     (use-package general
       :straight t)
   #+end_src
   
** Hydra

   - *NOTE:* It's important to keep it up here, to have ~:general~
     keyword available in ~use-package~.
     
   #+begin_src emacs-lisp
     (use-package hydra
       :straight t
       :config
       ;; This configuration is noted on the header of `hydra-example.el`
       (setq hydra-examples-verbatim t)
       ;; hydra-move-splitters are defined here
       (require 'hydra-examples))
   #+end_src

** Ivy
   - NOTE: Ivy is splitted into:
     1. ~ivy~
     2. ~swiper~
     3. ~counsel~: Installing this one will bring in the other two as
        dependencies..

   #+begin_src emacs-lisp
     (use-package counsel
       :straight t
       :general ("C-s" 'swiper-isearch
                 "M-y" 'counsel-yank-pop)
       :config
       ;; Enable ivy globally
       (ivy-mode 1)
       (counsel-mode 1)
       )
   #+end_src
   
   This [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] package provides some quick documents around the
   completion object, which is quite useful.
   
   #+begin_src emacs-lisp
     (use-package ivy-rich
       :straight t
       :config
       (ivy-rich-mode 1))
   #+end_src
   
   Better sorting ([[https://github.com/raxod502/prescient.el][prescient]]):
   #+begin_src emacs-lisp
     (use-package ivy-prescient
       :straight t
       :config
       (ivy-prescient-mode))
   #+end_src
   
*** Sources
    1. [[https://oremacs.com/swiper/][Swiper Documents]]
  
** [[https://github.com/abo-abo/ace-window/][Ace]]

   #+begin_src emacs-lisp
     (use-package ace-window
       :straight t)
   #+end_src

** Keybindings
*** Zoom Hydra
   
   #+begin_src emacs-lisp
     (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("=" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("r" text-scale-set "reset"))
   #+end_src
   
*** Help Hydra

    #+begin_src emacs-lisp
      (global-set-key
       (kbd "<f1>")
       (defhydra hydra-help (:color blue)
         "help"
         ("f" counsel-describe-function "function")
         ("v" counsel-describe-variable "variable")
         ("k" describe-key "key")))
    #+end_src
    
*** Window Hydra

    #+begin_src emacs-lisp
      (defhydra hydra-window (:color blue)
        "window"
        ("h" windmove-left "move-left")
        ("j" windmove-down "move-down")
        ("k" windmove-up "move-up")
        ("l" windmove-right "move-write")

        ("H" hydra-move-splitter-left nil)
        ("J" hydra-move-splitter-down nil)
        ("K" hydra-move-splitter-up nil)
        ("L" hydra-move-splitter-right nil)
        ("/" (lambda ()
               (interactive)
               (split-window-right)
               (windmove-right))
         "split-vertically")
        ("-" (lambda ()
               (interactive)
               (split-window-below)
               (windmove-down))
         "split-horizontally")
        ("o" delete-other-windows "one" :exit t)
        ("a" ace-window "ace")
        ("s" ace-swap-window "swap")
        ("d" ace-delete-window "del")
        ("i" ace-maximize-window "ace-one" :exit t))
    #+end_src
* Utils
** [[https://github.com/iqbalansari/restart-emacs][Restart Emacs]]
   #+begin_src emacs-lisp
     (use-package restart-emacs
       :straight t)
   #+end_src

* Org

  #+begin_src emacs-lisp
    (require 'org-tempo)
    (use-package org
      :straight org-plus-contrib
      :config
      (require 'ob-tangle)
      (setq org-use-speed-commands t
            org-src-fontify-natively t
            org-src-tab-acts-natively t
            org-capture-inbox-file "~/org/inbox.org"
            org-capture-web-file "~/org/web.org")

      (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

      (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                     (file+headline org-capture-inbox-file "Tasks")
                                     "* TODO %i%?")
                                    ("n" "note" entry
                                     (file+headline org-capture-inbox-file "Notes")
                                     "* %u %?\n%i\n%a" :prepend t)
                                    ("b" "Quick link bookmark" entry
                                     (file+headline org-capture-web-file "Bookmarks")
                                     "* %a %U"
                                     :immediate-finish t)
                                    ("B" "Link capture" entry
                                     (file+headline org-capture-web-file "Bookmarks")
                                     "* %a %U")
                                    ("l" "Quick read later" entry
                                     (file+headline org-capture-web-file "Read Later")
                                     "* TODO %a %U"
                                     :immediate-finish t)
                                    ("L" "Read Later" entry
                                     (file+headline org-capture-web-file "Read Later")
                                     "* TODO %a %U")
                                    ))

      (require 'org-protocol))

    (use-package org-journal
      :straight t
      :config
      (setq org-journal-dir "~/org/journal"
            org-journal-date-prefix "#+TITLE: "
            org-journal-file-format "%Y-%m-%d.org"
            org-journal-date-format "%A, %d %B %Y")

      (defun get-org-journal-date (date)
        "Get org-journal's file for the DATE."
        (let ((name (format-time-string org-journal-file-format date)))
          (expand-file-name (concat (file-name-as-directory org-journal-dir) name))))

      (defun get-org-journal-today ()
        "Get today's journal file path."
        (get-org-journal-date (current-time)))

      (defun org-journal-today ()
        "Get todays journal file path."
        (interactive)
        (find-file (get-org-journal-today)))

      (defhydra hydra-journal (:color blue)
        ("t" org-journal-today "get today's journal file"))
      )

    (use-package org-roam
      :straight t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/org/wiki")

      :config

      (defhydra hydra-roam (:color blue)
        ("l" org-roam "roam")
        ("f" org-roam-find-file "find roam file")
        ("g" org-roam-graph-show "show graph")
        ("i" org-roam-insert "insert roam link")
        ("I" org-roam-insert-immediate "insert roam link immediately")
        ))

  #+end_src
  
  #+begin_src emacs-lisp
    (use-package org-bullets      
      :straight t
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode))
  #+end_src
  
** Sources
   1. [[https://orgmode.org/manual/Structure-Templates.html][org-documents structured templates]]

* Programming
** [[https://github.com/bbatsov/projectile][Projectile]]
   #+begin_src emacs-lisp
     (use-package projectile
       :straight t
       :config
       (projectile-mode +1)
       (setq projectile-enable-caching t))

     (use-package counsel-projectile
       :after projectile
       :straight t
       :config
       (setq projectile-completion-system 'ivy)

       (defhydra hydra-projectile-other-window (:color teal)
         "projectile-other-window"
         ("f"  projectile-find-file-other-window        "file")
         ("g"  projectile-find-file-dwim-other-window   "file dwim")
         ("d"  projectile-find-dir-other-window         "dir")
         ("b"  projectile-switch-to-buffer-other-window "buffer")
         ("q"  nil                                      "cancel" :color blue))

       (defhydra hydra-projectile (:color teal
                                          :hint nil)
         "
      PROJECTILE:

      Find File            Search/Tags          Buffers                Cache
        ------------------------------------------------------------------------------------------
          _f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
          _/_: file dwim                              _b_: switch to buffer  _x_: remove known project
          _._: file curr dir   _o_: multi-occur       _K_: Kill all buffers  _X_: cleanup non-existing
          _r_: recent file                                               ^^^^_z_: cache current
          _d_: dir                                                           _s_: Save buffers

        "
         ("a"   counsel-projectile-ag)
         ("b"   counsel-projectile-switch-to-buffer)
         ("c"   projectile-invalidate-cache)
         ("d"   counsel-projectile-find-dir)
         ("f"   counsel-projectile-find-file)
         ("."   counsel-projectile-find-file-dwim)
         ("/"   projectile-find-file-in-directory)
         ("i"   projectile-ibuffer)
         ("K"   projectile-kill-buffers)
         ("o"   projectile-multi-occur)
         ("p"   projectile-switch-project)
         ("r"   projectile-recentf)
         ("x"   projectile-remove-known-project)
         ("X"   projectile-cleanup-known-projects)
         ("z"   projectile-cache-current-file)
         ("s"   projectile-save-project-buffers)
         ("q"   nil "cancel" :color blue)))
   #+end_src

** Git

  #+begin_src emacs-lisp
    (use-package magit
      :straight t
      :config
      ;; It's possible to deactivate modalka in modes like this, however
      ;; look like it's not the best idea. For now I'm going to take this
      ;; approach:
      ;; 1. By default I want to navigate any buffer.
      ;; 2. If I want to do any change (including staging on git), I need to
      ;;    switch to insert mode.
      ;;
      ;;(add-to-list 'modalka-excluded-modes 'magit-status-mode)
      ;;(add-to-list 'modalka-excluded-modes 'magit-section-mode-hook)
      )
  #+end_src
** Smartparens

   #+begin_src emacs-lisp
     (use-package smartparens
       :straight t
       :config
       (require 'smartparens-config)

       ;; do not pair stars
       (sp-local-pair 'org-mode "*" nil :actions :rem)
       (smartparens-global-mode))
   #+end_src
   
**‌ Company

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0
          company-minimum-prefix-length 2)
    (general-define-key
     :keymaps 'prog-mode-map
     "C-." 'company-complete))


  (use-package company-quickhelp
    :after company
    :straight t
    :config
    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-h") #'company-quickhelp-manual-begin)))
#+end_src

** Yasnippet

   #+begin_src emacs-lisp
     (use-package yasnippet
       :straight t
       :init
       (yas-global-mode 1))
   #+end_src
   
** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :hook (scala-mode . eglot-ensure)  
    :config
    (add-to-list 'eglot-server-programs '(scala-mode . ("metals-emacs")))

    (defhydra hydra-eglot (:exit t :hint nil)
      ("d" eglot-find-declaration "find declaration")
      ("t" eglot-typeDefinition "find type definition")
      ("i" eglot-find-implementation "find implementation")
      ("r" eglot-rename "rename")
      ("f" eglot-format-buffer "format")
      ("a" eglot-code-actions "code actions")))
#+end_src

** Languages
*** Scala
#+begin_src emacs-lisp
  (use-package scala-mode
    :straight t
    :defer t
    :mode "^\w+\\.s\\(cala\\|bt\\)$")

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :defer t
    :straight t)
#+end_src
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode
        :straight t)
    #+end_src
*** Pip Requirements
    #+begin_src emacs-lisp
      (use-package pip-requirements
        :straight t
        :mode ("/requirements.txt$" . pip-requirements-mode))
    #+end_src
*** Terraform
    #+begin_src emacs-lisp
      (use-package terraform-mode
        :straight t)

      (use-package company-terraform
        :after company
        :straight t
        :config
        (require 'company-terraform)
        (company-terraform-init))
    #+end_src
*** Jinja2
    #+begin_src emacs-lisp
      (use-package jinja2-mode
        :straight t
        :defer t)
    #+end_src
** Tools
*** Dumb Jump
    #+begin_src emacs-lisp
      (use-package dumb-jump
        :straight t
        :config
        (setq dumb-jump-selector 'ivy)
        (defhydra dumb-jump-hydra (:color blue :columns 3)
          "Dumb Jump"
          ("j" dumb-jump-go "Go")
          ("o" dumb-jump-go-other-window "Other window")
          ("e" dumb-jump-go-prefer-external "Go external")
          ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
          ("i" dumb-jump-go-prompt "Prompt")
          ("l" dumb-jump-quick-look "Quick look")
          ("b" dumb-jump-back "Back")))
    #+end_src
*** Anzu
    #+begin_src emacs-lisp
      (use-package anzu
        :straight t
        :config
        (defhydra hydra-anzu (:color blue)
          "Anzu"
          ("q" anzu-query-replace "query replace")
          ("r" anzu-query-replace-regexp "regex replace")
          ("c" anzu-query-replace-at-cursor "cursor at thing replac")))
    #+end_src
*** DirEnv
#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :config
    (direnv-mode))
#+end_src
*** Rainbow Mode
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
        :straight t
        :config
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src
*** Expand Region
    #+begin_src emacs-lisp
      (use-package expand-region
        :straight t
        :config
        (defhydra hydra-expand ()
          "expand-region"
          ("c" er/contact-region "contract")
          ("e" er/expand-region "expand")
          ("w" er/mark-word "word")
          ("s" er/mark-symbol "symbol"))
        )
    #+end_src
*** Aggressive Indent
    #+begin_src emacs-lisp
      (use-package aggressive-indent
        :straight t
        :config
        (global-aggressive-indent-mode 1))
    #+end_src
*** Treemacs
    #+begin_src emacs-lisp
      (use-package treemacs
        :straight t
        :general
        ("<f8>" 'treemacs)
        :config
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-git-mode 'deferred))

      ;; quickly add projectile projects to treemacs workspace
      (use-package treemacs-projectile
        :after projectile treemacs
        :straight t)

      ;; allows to use treemacs icons in dired mode
      (use-package treemacs-icons-dired
        :after treemacs dired
        :straight t
        :config (treemacs-icons-dired-mode))

      ;; show the status of git tracked files using magit
      (use-package treemacs-magit
        :after treemacs magit
        :straight t)
    #+end_src
** Lint
    #+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (add-hook 'prog-mode-hook 'flycheck-mode))

  (use-package flycheck-pos-tip
    :after flycheck
    :straight t
    :config
    (setq flycheck-pos-tip-timeout 10
          flycheck-display-errors-delay 0.5)
    (flycheck-pos-tip-mode +1))
#+end_src
** Yaml
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :straight t)
   #+end_src
** JSON
   #+begin_src emacs-lisp
     (use-package json-mode
       :straight t)
   #+end_src
* Look
** Theme
  [[https://gitlab.com/protesilaos/modus-themes][Modus Operandi]]! I've never used light themes like this, but I'm
  going to give it a try for a while. Interesting thing about this
  theme is [[https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html][WCAG standard]] which requires to have contrast ratio of
  >=7:1 between foreground and background colors.

  #+begin_src emacs-lisp
    (use-package modus-operandi-theme
      :straight t
      :config
      (load-theme 'modus-operandi t))
  #+end_src

*** To be done [0%]
**** TODO Tune Modus Operandi
   This theme is also very customizable and the documntation provides a
   good details on it, I need to come back to it and tune it in future.
** Font
   #+begin_src emacs-lisp
     (set-frame-font (font-spec :family "Fira Code" :size 15))
   #+end_src

* TO-Do [33%]
** TODO Learn how speed commands for org-mode work
~F1 v org-speed-commands-default RET~
** TODO Is it possible to set non-programming mode fonts to something that supports Persian as well?
*** *NOT USABLE:* Unfortunately as you can test [[https://bboxtype.com/typefaces/FiraGO/#!layout=editor][here]], FiraGo doesn't show پ as good as it should be! 
      [[https://bboxtype.com/typefaces/FiraGO/#!layout=specimen][FiraGo]] looks like a good candidate, and [[https://www.emacswiki.org/emacs/ProgMode][looks like]] setting the
      font as a hook for ~text-mode~ would be the solution. However the
      FiraGo font is separated per language, and may not support all
      characters at once.
** DONE Learn and use [[https://github.com/magnars/expand-region.el][Expand Region]]
** DONE Extract useful things from lolsmacs
** TODO Undo-tree
** TODO Ensure SQLite3 is installed on the host
   https://www.orgroam.com/manual/Post_002dInstallation-Tasks.html#Post_002dInstallation-Tasks
