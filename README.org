* Packages
  
  #+begin_src emacs-lisp
    (require 'package)

    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/"))

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    ;; Always ensure use-package packages are installed
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  #+end_src
  
* Helper Functions
  
** TODO Write helper to run a piece of code when a package is loaded.
   References:
   1. [[https://github.com/hlissner/doom-emacs/blob/2441d28ad15a9a2410f8d65641961ea5b1d39782/core/core-lib.el#L333][doom after!]]
   2. [[https://github.com/abo-abo/ace-window/wiki][ace wiki]]

  #+begin_src emacs-lisp
  #+end_src

* Navigation
** Modalka

   #+begin_src emacs-lisp
     (use-package crux)

     (defun run-exit-modalka (func &rest args)
       "run func and exit modalka mode afterwards"
       (apply func args)
       (if modalka-mode
	   (disable-modalka)))

     (defun enable-modalka ()
       "Enable modalka if it's not already active"
       (interactive)
       (if (not modalka-mode)
	   (modalka-mode 1))
       (message "modalka is enable now."))

     (defun disable-modalka ()
       "Disable modalka if it's active."
       (interactive)
       (if modalka-mode
	   (modalka-mode -1))
       (message "modalka is disable now."))

     (defun insert-forward ()
       "Move one character forward and exit modalka"
       (interactive)
       (run-exit-modalka 'forward-char))

     (defun insert-end-of-line ()
       "Move to the end of line and exit modalka"
       (interactive)
       (run-exit-modalka 'end-of-line))

     (defun insert-new-line-above ()
       "Open a new line above and exit modalka"
       (interactive)
       (run-exit-modalka 'crux-smart-open-line-above))

     (defun insert-new-line ()
       "Open a new line and exit modalka"
       (interactive)
       (run-exit-modalka 'crux-smart-open-line nil))

     (defun kill-line-forward ()
       "Kill current line and the one after it"
       (interactive)
       (crux-kill-whole-line 2))

     (defun kill-line-backward ()
       "Kill current line and the one before it"
       (interactive)
       (previous-line 1)
       (crux-kill-whole-line 2))

     (defun replace-char-at-point ()
       "Replace char at point"
       (interactive)
       (let ((cursor-color (face-attribute 'cursor :background)))
	 (blink-cursor-mode 0)
	 (set-cursor-color "#005e00")
	 (let ((char (read-key)))
	   (delete-char 1)
	   (insert char)
	   (backward-char))
	 (set-cursor-color cursor-color)
	 (blink-cursor-mode 1)
	 ))

     (defun find-literate-config ()
       "Find literate config file"
       (interactive)
       (find-file (expand-file-name "README.org" user-emacs-directory)))

     (use-package ace-jump-mode)

     (use-package modalka
       :after general crux
       :config
       (setq-default cursor-type '(bar . 2))
       (setq modalka-cursor-type 'box)

       (defhydra kill-hydra (:color blue)
	 ("d" crux-kill-whole-line "kill current line")
	 ("w" kill-word "kill next word")
	 ("j" kill-line-forward "kill line forward")
	 ( "k" kill-line-backward "kill line backward"))

       (defhydra ace-jump-hydra (:color blue)
	 ("w" ace-jump-word-mode "jump to word")
	 ("c" ace-jump-char-mode "jump to character")
	 ("l" ace-jump-line-mode "jump to line"))

       (modalka-global-mode 1)

       (general-define-key
	:keymaps 'modalka-mode-map
	:prefix "SPC"
	"" nil
	"w" 'hydra-window/body
	"gg" 'magit-status
	"bb" 'ivy-switch-buffer
	"br" 'crux-rename-file-and-buffer
	"ff" 'counsel-find-file
	"fi" 'find-literate-config
	"fs" 'save-buffer
	"fr" 'counsel-recentf)

       (general-define-key
	:keymaps 'modalka-mode-map
	"RET" ""
	"DEL" ""
	"!" ""
	"@" ""
	"#" ""
	"%" ""
	"^" ""
	"&" ""
	"(" ""
	")" ""
	"-" ""
	"+" ""
	"\\" ""
	"|" ""
	"[" ""
	"]" ""
	"{" ""
	"'" ""
	";" ""
	"\"" ""
	":" ""
	"/" ""
	"." ""
	"," ""
	">" ""
	"<" ""
	"`'" ""
	"~" ""
	"0" 'beginning-of-line
	"*" 'swiper-thing-at-point
	"=" 'indent-region
	"$" 'end-of-line
	"A" 'insert-end-of-line
	"B" ""
	"C" ""
	"D" ""
	"E" ""
	"F" 'ace-jump-hydra/body  ;; probaby useless
	"G" 'end-of-buffer
	"H" ""
	"I" ""
	"J" ""
	"K" ""
	"L" ""
	"M" ""
	"N" ""
	"O" 'insert-new-line-above
	"P" ""
	"Q" ""
	"R" ""
	"S" ""
	"T" ""
	"U" ""
	"V" ""
	"W" ""
	"Y" ""
	"Z" ""
	"C-r" 'undo-redo
	"X" 'backward-delete-char-untabify
	"^" 'back-to-indentation
	"a" 'insert-forward
	"b" 'backward-word
	"c" ""
	"d" 'kill-hydra/body
	"e" ""
	"f" 'ace-jump-char-mode
	"g" ""
	"h" 'backward-char
	"i" 'disable-modalka
	"j" 'next-line
	"k" 'previous-line
	"l" 'forward-char
	"m" ""
	"n" ""
	"o" 'insert-new-line
	"p" 'yank
	"q" ""
	"r" 'replace-char-at-point
	"s" ""
	"t" ""
	"u" 'undo
	"v" ""
	"w" 'forward-word
	"x" 'delete-char
	"y" ""
	"z" ""
     ;;   "yy" 'kill-ring-save     
	)

       (modalka-define-kbd "1" "M-1")
       (modalka-define-kbd "2" "M-2")
       (modalka-define-kbd "3" "M-3")
       (modalka-define-kbd "4" "M-4")
       (modalka-define-kbd "5" "M-5")
       (modalka-define-kbd "6" "M-6")
       (modalka-define-kbd "7" "M-7")
       (modalka-define-kbd "8" "M-8")
       (modalka-define-kbd "9" "M-9")
       (general-define-key
	[escape] 'enable-modalka))
   #+end_src
** General
   
   - *NOTE:* It's important to keep it up here, to have ~:general~
     keyword available in ~use-package~.
   - evil-collection binds over SPC in many packages. To use SPC as a
     leader key with the general library set
     ~general-override-states~ ([[https://github.com/emacs-evil/evil-collection#faq][source]]).

   #+begin_src emacs-lisp
     (use-package general
       :init
       (setq general-override-states '(insert
				       emacs
				       hybrid
				       normal
				       visual
				       motion
				       operator
				       replace))
       :config
       (general-create-definer my-leader-def
	 ;; :prefix my-leader
	 :prefix "SPC")

       (general-create-definer my-local-leader-def
	 ;; :prefix my-local-leader
	 :prefix "SPC m"))
   #+end_src
   
** Hydra

   - *NOTE:* It's important to keep it up here, to have ~:general~
     keyword available in ~use-package~.
     
   #+begin_src emacs-lisp
     (use-package hydra
       :config
       ;; This configuration is noted on the header of `hydra-example.el`
       (setq hydra-examples-verbatim t)
       ;; hydra-move-splitters are defined here
       (require 'hydra-examples))
   #+end_src

** Ivy
   - NOTE: Ivy is splitted into:
     1. ~ivy~
     2. ~swiper~
     3. ~counsel~: Installing this one will bring in the other two as
        dependencies..

   #+begin_src emacs-lisp
     (use-package counsel
       :general ("C-s" 'swiper-isearch
		 "M-y" 'counsel-yank-pop)
       :config
       ;; Enable ivy globally
       (counsel-mode 1))
   #+end_src
   
   This [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] package provides some quick documents around the
   completion object, which is quite useful.
   
   #+begin_src emacs-lisp
     (use-package ivy-rich
       :config
       (ivy-rich-mode 1))
   #+end_src

*** Sources
    1. [[https://oremacs.com/swiper/][Swiper Documents]]
  
** [[https://github.com/abo-abo/ace-window/][Ace]]

   #+begin_src emacs-lisp
     (use-package ace-window)
   #+end_src

** Keybindings
*** Zoom Hydra
   
   #+begin_src emacs-lisp
     (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("=" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("r" text-scale-set "reset"))
   #+end_src
   
*** Help Hydra

    #+begin_src emacs-lisp
      (global-set-key
       (kbd "<f1>")
       (defhydra hydra-help (:color blue)
	 "help"
	 ("f" counsel-describe-function "function")
	 ("v" counsel-describe-variable "variable")
	 ("k" describe-key "key")))
    #+end_src
    
*** Window Hydra

    #+begin_src emacs-lisp
      (my-leader-def
	:states 'normal
	:keymaps 'override
	"w" (defhydra hydra-window (:color red)
	      "window"
	      ("h" windmove-left "move-left")
	      ("j" windmove-down "move-down")
	      ("k" windmove-up "move-up")
	      ("l" windmove-right "move-write")

	      ("H" hydra-move-splitter-left nil)
	      ("J" hydra-move-splitter-down nil)
	      ("K" hydra-move-splitter-up nil)
	      ("L" hydra-move-splitter-right nil)
	      ("/" (lambda ()
		     (interactive)
		     (split-window-right)
		     (windmove-right))
	       "split-vertically")
	      ("-" (lambda ()
		     (interactive)
		     (split-window-below)
		     (windmove-down))
	       "split-horizontally")
	      ("o" delete-other-windows "one" :exit t)
	      ("a" ace-window "ace")
	      ("s" ace-swap-window "swap")
	      ("d" ace-delete-window "del")
	      ("i" ace-maximize-window "ace-one" :exit t)))
    #+end_src
* Utils

** [[https://github.com/iqbalansari/restart-emacs][Restart Emacs]]
   #+begin_src emacs-lisp
     (use-package restart-emacs)
   #+end_src

* Org

  #+begin_src emacs-lisp
    (require 'org-tempo)
  #+end_src
  
** Sources
   1. [[https://orgmode.org/manual/Structure-Templates.html][org-documents structured templates]]

* Programming
** [[https://github.com/bbatsov/projectile][Projectile]]
   
   #+begin_src emacs-lisp
     (use-package projectile
       :general
       (my-leader-def
	 :states 'normal
	 :keymaps 'override
	 "p" 'hydra-projectile/body)
       :config
       (setq projectile-completion-system 'ivy)

       (defhydra hydra-projectile-other-window (:color teal)
	 "projectile-other-window"
	 ("f"  projectile-find-file-other-window        "file")
	 ("g"  projectile-find-file-dwim-other-window   "file dwim")
	 ("d"  projectile-find-dir-other-window         "dir")
	 ("b"  projectile-switch-to-buffer-other-window "buffer")
	 ("q"  nil                                      "cancel" :color blue))

       (defhydra hydra-projectile (:color teal
					  :hint nil)
	 "
	  PROJECTILE: %(projectile-project-root)

	  Find File            Search/Tags          Buffers                Cache
     ------------------------------------------------------------------------------------------
       _f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _s-f_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
     _s-d_: file curr dir   _o_: multi-occur       _K_: Kill all buffers  _X_: cleanup non-existing
       _r_: recent file                                               ^^^^_z_: cache current
       _d_: dir

     "
	 ("a"   projectile-ag)
	 ("b"   projectile-switch-to-buffer)
	 ("c"   projectile-invalidate-cache)
	 ("d"   projectile-find-dir)
	 ("f"   projectile-find-file)
	 ("s-f" projectile-find-file-dwim)
	 ("s-d" projectile-find-file-in-directory)
	 ("g"   ggtags-update-tags)
	 ("i"   projectile-ibuffer)
	 ("K"   projectile-kill-buffers)
	 ("o"   projectile-multi-occur)
	 ("p"   projectile-switch-project)
	 ("r"   projectile-recentf)
	 ("x"   projectile-remove-known-project)
	 ("X"   projectile-cleanup-known-projects)
	 ("z"   projectile-cache-current-file)
	 ("`"   hydra-projectile-other-window/body "other window")
	 ("q"   nil "cancel" :color blue)))
   #+end_src

** Git

  #+begin_src emacs-lisp
    (use-package magit
      :config
      (add-to-list 'modalka-excluded-modes 'magit-status-mode)
      (add-to-list 'modalka-excluded-modes 'magit-section-mode-hook))
  #+end_src
** Smartparens

   #+begin_src emacs-lisp
     (use-package smartparens
       :config
       (require 'smartparens-config)

       ;; do not pair stars
       (sp-local-pair 'org-mode "*" nil :actions :rem)
       (smartparens-global-mode))
   #+end_src
* Look
** Theme
  [[https://gitlab.com/protesilaos/modus-themes][Modus Operandi]]! I've never used light themes like this, but I'm
  going to give it a try for a while. Interesting thing about this
  theme is [[https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html][WCAG standard]] which requires to have contrast ratio of
  >=7:1 between foreground and background colors.

  #+begin_src emacs-lisp
    (use-package modus-operandi-theme
      :config
      (load-theme 'modus-operandi t))
  #+end_src

*** To be done [0%]
**** TODO Tune Modus Operandi
   This theme is also very customizable and the documntation provides a
   good details on it, I need to come back to it and tune it in future.
** Font
   #+begin_src emacs-lisp
     (set-frame-font (font-spec :family "Fira Code" :size 15))
   #+end_src
*** To be done [0%]
**** TODO Is it possible to set non-programming mode fonts to something that supports Persian as well?
***** *NOT USABLE:* Unfortunately as you can test [[https://bboxtype.com/typefaces/FiraGO/#!layout=editor][here]], FiraGo doesn't show پ as good as it should be! 
      [[https://bboxtype.com/typefaces/FiraGO/#!layout=specimen][FiraGo]] looks like a good candidate, and [[https://www.emacswiki.org/emacs/ProgMode][looks like]] setting the
      font as a hook for ~text-mode~ would be the solution. However the
      FiraGo font is separated per language, and may not support all
      characters at once.
